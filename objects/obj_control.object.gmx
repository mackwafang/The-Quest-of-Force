<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum skillData {
    level = 0,
    maxLevel = 1,
    requiredLevel = 2,
    preReq = 3,
    info = 4,
    primaryEffect = 5,
    secondaryEffect = 6,
    increaseEffect = 7
}

global.gridSize = 16;
//global.grid = mp_grid_create(0,0,room_width div global.gridSize,room_height div global.gridSize,global.gridSize,global.gridSize);
//mp_grid_add_instances(global.grid,obj_wall,false);

global.class = 0;
global.str = 0;
global.stam = 0;
global.mana = 0;
global.luck = 0;
global.crit = 5;
global.critAtt = 22;
global.meleeRange = 40;

global.level = 1;
global.minDmg = 0.75;
global.maxDmg = 1.25;
global.maxHP = 40;
global.maxSP = 30;
global.hpGen = 0;
global.spGen = 0;
global.sp = global.maxSP;
global.xp = calculateTotalXP(300);
global.maxXP = 10;
global.gold = 100;
global.HPPotion = 5;
global.SPPotion = 5;
global.HPPotionCooldown = 0;
global.SPPotionCooldown = 0;
global.dualWield = false;
global.damage_font = font_add_sprite(spr_damage_font,ord("0"),false,0);
global.game_font = font_add_sprite(spr_game_font,ord(" "),true,0);
global.skillNumberFont = font_add_sprite(spr_skill_level_required,ord("0"),false,0);
guiFont = font_add_sprite(spr_gui_font,ord("!"),true,0);
skillFont = font_add_sprite(spr_skill_font,ord(" "),true,2);
statFont = font_add_sprite_ext(spr_stat_font,".0123456789",true,0);
buffFont = font_add_sprite(spr_buff_font,ord(" "),true,0);
comboFont = font_add_sprite_ext(spr_combo_font,"0123456789",true,0);
/********************* EQUIP SLOT ******************/
enum equipKind {
    top = 0,
    bottom = 1,
    shoes = 2,
    gloves = 3,
    hat = 4,
    weapon = 5
}
enum equipData {
    name = 0,
    str = 1,
    stam = 2,
    mana = 3,
    luck = 4,
    hp = 5,
    sp = 6,
    minDmg = 7,
    maxDmg = 8,
    crit = 9,
    critDmg = 10,
    classRestriction = 11,
    value = 12
}
for (var i = 0; i &lt; 6; i++) {
    global.equipment[i,equipData.name] = "";
    global.equipment[i,equipData.str] = 0;
    global.equipment[i,equipData.stam] = 0;
    global.equipment[i,equipData.mana] = 0;
    global.equipment[i,equipData.luck] = 0;
    global.equipment[i,equipData.hp] = 0;
    global.equipment[i,equipData.sp] = 0;
    global.equipment[i,equipData.minDmg] = 0;
    global.equipment[i,equipData.maxDmg] = 0;
    global.equipment[i,equipData.crit] = 0;
    global.equipment[i,equipData.critDmg] = 0;
    global.equipment[i,equipData.classRestriction] = -1;
    global.equipment[i,equipData.value] = 0;
}
/********************* SKILLS ******************/
global.skillCooldown[0] = 0;
global.skillCooldown[1] = 0;
global.skillCooldown[2] = 0;
global.skillCooldown[3] = 0;
global.skillMaxCooldown[0] = 6*60;
global.skillMaxCooldown[1] = 10*60;
global.skillMaxCooldown[2] = 20*60;
global.skillMaxCooldown[3] = 40*60;
global.skillPoints = 1;
initStat();

global.systemMessageLength = 10
for(var i = 0; i &lt; global.systemMessageLength; i++){
    global.systemMessage[i,0] = "";//String
    global.systemMessage[i,1] = 0; //Timer
}
for(var i = 0; i &lt; 4; i++) {
    skillAnimation[i,0] = false;
    skillAnimation[i,1] = -1;
}
for (var i = 0; i &lt; 4; i++) {
    hotbarSurface[i] = -1;
}
/********************* BUFF ******************/
enum buffListData {
    name = 0,
    sprite = 1,
    description = 2,
    time = 3
}
globalvar buffListSize, buffList;
buffListSize = 30;
for (var i = 0; i &lt; buffListSize; i ++) {
    buffList[i,buffListData.name] = "";
    buffList[i,buffListData.sprite] = -1;
    buffList[i,buffListData.description] = "";
    buffList[i,buffListData.time] = 0;
}
/********************* MESSAGE ******************/
systemMessageTimer = 0;
systemStartFade = false;
systemMoveUp = 0;
global.systemMessageQueue = ds_queue_create();

openSkillWindow = false;
openDetailStat = false;
skill_init();
skillCoordinate();
enemyListInit();
increaseSkillLevel(20+(global.class*4));
global.skillPoints++;
//setAllSkills(-1);
global.useLighting = false;
display_set_gui_size(view_wport,view_hport);
globalvar displayDamage, quality;
displayDamage = true;
quality = 0;

globalvar totalHits, totalPlayerDamage, damageTimer, damageTimerMax, damageSize;
damageTimerMax = 180;
damageTimer = 0;
damageSize = 1;
totalHits = 0;
totalPlayerDamage = 0;

healthMove = 0;
spMove = 0;
xpMove = 0;

test = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 60;
if(keyboard_check_pressed(vk_space)) {
    instance_deactivate_all(true);
}
healthMove = var_wipe(healthMove,health,global.maxHP,0,0.5);
spMove = var_wipe(spMove,global.sp,global.maxSP,0,0.5);
xpMove = var_wipe(xpMove,global.xp,global.maxXP,0.2,0);
global.sp = clamp(global.sp,0,global.maxSP);
health = clamp(health,0,global.maxHP);
/******************* HP GEN ************************/
global.hpGen = 2+min(100,(global.stam+getAllEquipmentBonus(equipData.stam)) div 5);
global.hpGen += useSkill(39,1);
global.hpGen += useSkill(40,1);
global.hpGen += useSkill(47,1);
/******************* SP GEN ************************/
global.spGen = 2+min(100,(global.mana+getAllEquipmentBonus(equipData.mana)) div 5)
global.spGen += useSkill(16,1);
global.spGen += useSkill(17,1);
global.spGen += useSkill(18,1);
/******************* CRITICAL ************************/
global.critAtt = 22+((global.str+global.mana) div 20);
global.critAtt += useSkill(37,1);
global.critAtt += getAllEquipmentBonus(equipData.crit);
global.critAtt += useSkill(53,2);
if (global.skill[38,skillData.level] &gt; 0) {
    global.critAtt *= useSkill(38,1);
}
/******************* Minimum damage ************************/
global.minDmg = 0.75+useSkill(53,1)+useSkill(54,1)+useSkill(55,1)+useSkill(56,1)+getAllEquipmentBonus(equipData.minDmg);
/******************* Maxmimum damage ************************/
global.maxDmg = 1.25+useSkill(53,1)+useSkill(57,1)+useSkill(58,1)+useSkill(59,1)+getAllEquipmentBonus(equipData.maxDmg);
/*for (var k = 0; k &lt; instance_number(obj_enemy_parent); k ++) {
    var enemy = instance_find(obj_enemy_parent,k);
    var xx = enemy.x div global.gridSize;
    var yy = enemy.y div global.gridSize;
    enemy.prevX = xx;
    enemy.prevY = yy;
    if (mp_grid_get_cell(global.grid,xx,yy) != -1) {
        mp_grid_add_cell(global.grid,xx,yy);
    }
}
for (var j = 0; j &lt; room_height div global.gridSize; j++) {
    for (var i = 0; i &lt; room_width div global.gridSize; i++) {
        if (mp_grid_get_cell(global.grid,i,j) == -1) {
            if (!collision_rectangle(i*global.gridSize,j*global.gridSize,(i+1)*global.gridSize,(j+1)*global.gridSize,obj_kinetic,false,false)) {
                mp_grid_clear_cell(global.grid,i,j);
            }
        }
    }
}*/
/*if(keyboard_check_pressed(vk_left)){
    room = global.dungeonRooms[--global.currentRoomX,global.currentRoomY];
}
if(keyboard_check_pressed(vk_right)){
    room = global.dungeonRooms[++global.currentRoomX,global.currentRoomY];
}
if(keyboard_check_pressed(vk_up)){
    room = global.dungeonRooms[global.currentRoomX,--global.currentRoomY];
}
if(keyboard_check_pressed(vk_down)){
    room = global.dungeonRooms[global.currentRoomX,++global.currentRoomY];
}
/******************* Buff list ******************/
for (var i = 0; i &lt; buffListSize; i++) {
    if (buffList[i,buffListData.time] &gt; 0) {
        buffList[i,buffListData.time]--; //Decrease timer
    }
    else {
        //Overwrite with other buffs
        for (var j = i; j &lt; buffListSize; j++) {
            if (j &lt; buffListSize-1) {
                for (var k = 0; k &lt; array_length_2d(buffList,j); k ++) {
                    buffList[j,k] = buffList[j+1,k];
                }
            }
            else {
                buffList[j,buffListData.name] = "";
                buffList[j,buffListData.sprite] = -1;
                buffList[j,buffListData.description] = "";
                buffList[j,buffListData.time] = 0;
            }
        }
    }
}
/******************* Skill Cooldown ******************/
for(var i = 0; i &lt; 4; i++){
    if(global.skillCooldown[i] &gt; 0){
        global.skillCooldown[i] --;
        if(global.skillCooldown[i] == 1){
            skillAnimation[i,0] = true;
        }
    }
    if(skillAnimation[i,0]) {
        if(skillAnimation[i,1] &lt; 100) {
            skillAnimation[i,1] += 2;
        }
        else {
            skillAnimation[i,0] = false;
            skillAnimation[i,1] = 0;
            if (surface_exists(hotbarSurface[i])) {
                surface_free(hotbarSurface[i]);
            }
        }
    }
}
if(global.HPPotionCooldown &gt; -40) {
    global.HPPotionCooldown--;
}
if(global.SPPotionCooldown &gt; -40) {
    global.SPPotionCooldown--;
}
/************** Skill window ***************/
if(keyboard_check_pressed(ord("K"))){
    if(openSkillWindow){
        openSkillWindow = false;
    }
    else{
        openSkillWindow = true;
        if(openDetailStat){
            openDetailStat = false;
        }
    }
}
if(keyboard_check_pressed(ord("T"))){
    if(openDetailStat){
        openDetailStat = false;
    }
    else{
        openDetailStat = true;
        if(openSkillWindow){
            openSkillWindow = false;
        }
    }
}
/************** Level Up ***************/
if(global.xp &gt;= global.maxXP){
    global.level++;
    global.xp -= global.maxXP;
    global.maxXP = ceil(90*power(global.level,0.8));
    sendSystemMessage("Level "+string(global.level)+" achieved!");
    global.skillPoints ++;
    switch(global.class){
        case 0: increaseBasicStats(2,2,2,2);
                increaseHPSP(10,10);
                break;
        case 1: increaseBasicStats(4,3,1,1);
                increaseHPSP(20,0);
                break;
        case 2: increaseBasicStats(0,1,4,2);
                increaseHPSP(5,15);
                break;
        case 3: increaseBasicStats(2,1,1,4);
                increaseHPSP(10,10);
                break;
        case 4: increaseBasicStats(2,2,2,2);
                increaseHPSP(15,5);
                break;
    }
}
/************** Combos ***************/
if (damageTimer &gt; 0) {
    damageTimer--;
}
else {
    damageTimer = 0;
    totalHits = 0;
    totalPlayerDamage = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var wv, hv, xv, yv;
wv = view_wport[0];
hv = view_hport[0];
xv = view_xview[0];
yv = view_yview[0];
if(keyboard_check_pressed(vk_enter)) {game_restart();}
/*for(var i = 0; i &lt; global.dungeonW; i++){
    for(var j = 0; j &lt; global.dungeonH; j++){
        if(obj_player.x div 256 == j &amp;&amp; obj_player.y div 256 == i){
            draw_sprite_ext(spr_maze_sprite,global.dungeon[i,j],j*32,i*32,1,1,0,red,1);
        }
        else{
            draw_sprite(spr_maze_sprite,global.dungeon[i,j],j*32,i*32);
        }
    }
}
*/
/******************* HEALTH ******************/
draw_rectangle_colour(0,hv-36,wv,hv,0,0,0,0,false);

draw_set_font(global.skillNumberFont);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);

draw_primitive_begin(pr_trianglefan);
draw_set_colour(orange);
draw_vertex(0,hv-32);
if(round((health/global.maxHP)*100) &lt; round(healthMove)) {
    draw_vertex((healthMove*5.12),hv-32);
    draw_vertex((healthMove*5.12)-32,hv-12);
    draw_vertex(0,hv-12);
    draw_set_colour(white);
    draw_set_colour(red);
    draw_vertex(0,hv-32);
    draw_vertex((health/global.maxHP)*512,hv-32);
    draw_vertex(((health/global.maxHP)*512)-32,hv-12);
}
else {
    draw_vertex((health/global.maxHP)*512,hv-32);
    draw_vertex(((health/global.maxHP)*512)-32,hv-12);
    draw_vertex(0,hv-12);
    draw_set_colour(white);
    draw_set_colour(red);
    draw_vertex(0,hv-32);
    draw_vertex((healthMove*5.12),hv-32);
    draw_vertex((healthMove*5.12)-32,hv-12);
}
draw_vertex(0,hv-12);
draw_set_colour(white);
draw_primitive_end();


draw_text_transformed_colour(5,hv-22,string(round(health)),1.5,1.5,0,white,white,white,white,1);
/******************* SP ******************/
draw_set_valign(fa_middle);
draw_set_halign(fa_right);
draw_primitive_begin(pr_trianglefan);
draw_set_colour(blue);
draw_vertex(wv,hv-32);
if(round((global.sp/global.maxSP)*100) &lt; round(spMove)) {
    draw_vertex(wv-(spMove*5.12),hv-32);
    draw_vertex(wv-(spMove*5.12)+32,hv-12);
    draw_vertex(wv,hv-12);
    draw_set_colour(white);
    draw_set_colour(aqua);
    draw_vertex(wv,hv-32);
    draw_vertex(wv-((global.sp/global.maxSP)*512),hv-32);
    draw_vertex(wv-((global.sp/global.maxSP)*512)+32,hv-12);
    draw_vertex(wv,hv-12);
}
else {
    draw_vertex(wv-((global.sp/global.maxSP)*512),hv-32);
    draw_vertex(wv-((global.sp/global.maxSP)*512)+32,hv-12);
    draw_vertex(wv,hv-12);
    draw_set_colour(white);
    draw_set_colour(aqua);
    draw_vertex(wv,hv-32);
    draw_vertex(wv-(spMove*5.12),hv-32);
    draw_vertex(wv-(spMove*5.12)+32,hv-12);
}
draw_vertex(wv,hv-12);
draw_set_colour(white);
draw_primitive_end();
draw_text_transformed_colour(wv-5,hv-22,string(round(global.sp)),1.5,1.5,0,white,white,white,white,1);
/******************* XP ******************/
draw_set_font(global.game_font);
draw_rectangle_colour(0,hv-2,xpMove*wv/100,hv-12,green,green,green,green,false);
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_text_colour(0,hv+2,string(global.xp)+"/"+string(global.maxXP),$FFFFFF,$FFFFFF,$FFFFFF,$FFFFFF,1);
draw_set_halign(fa_right);
draw_text_colour(wv,hv+2,string((global.xp/global.maxXP)*100)+"%",$FFFFFF,$FFFFFF,$FFFFFF,$FFFFFF,1);
draw_set_font(statFont);
draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_text_colour(wv/2,hv-36,global.level,white,white,white,white,1);
/******************* STAT ******************/
draw_sprite(spr_stat,0,16,hv-80);
draw_sprite(spr_stat,1,16,hv-48);
draw_sprite(spr_stat,2,wv-16,hv-80);
draw_sprite(spr_stat,3,wv-16,hv-48);
draw_set_font(statFont);
draw_set_valign(fa_center);
draw_set_halign(fa_left);
draw_text_colour(32,hv-80,global.str,white,white,white,white,1);
draw_text_colour(32,hv-48,global.stam,white,white,white,white,1);
draw_set_valign(fa_center);
draw_set_halign(fa_right);
draw_text_colour(wv-32,hv-80,global.mana,white,white,white,white,1);
draw_text_colour(wv-32,hv-48,global.luck,white,white,white,white,1);
draw_set_font(statFont);
/******************* ATTACK SKILL******************/
for(var i = 0; i &lt; 4; i++){
    var skillX, skillY, skillID;
    skillID = i+(20+(global.class*4));
    skillX = ((wv/2)+(i*80))-152;
    skillY = hv-100;
    draw_sprite_ext(spr_skills,skillID,skillX,skillY,2,2,0,white,1);
    if(global.level &lt; global.skill[i+(20+(global.class*4)),2] || global.skill[i+(20+(global.class*4)),0] == 0 || global.sp &lt; useSkill(skillID,2)+(global.skill[skillID,0]*10)){
        draw_set_alpha(0.8);
        draw_set_colour(0);
        draw_rectangle(skillX,skillY+64,skillX+64,skillY,false);
        draw_set_colour(1);
        draw_set_alpha(1);
    }
    if(global.skillCooldown[i] &gt; 0){
        draw_set_alpha(0.8);
        draw_set_colour(0);
        draw_rectangle(skillX,skillY+64,skillX+64,skillY+64-(global.skillCooldown[i]/global.skillMaxCooldown[i])*64,false);
        draw_set_colour(1);
        draw_set_alpha(1);
        draw_set_valign(fa_center);
        draw_set_halign(fa_middle);
        var skillTimer;
        if(global.skillCooldown[i] div 60 &gt;= 10) { 
            skillTimer = global.skillCooldown[i] div 60;
        }
        else {
            skillTimer = string_format(global.skillCooldown[i]/60,0,1);
        }
        draw_text_colour(skillX+32,skillY+32,skillTimer,white,white,white,white,1);
    }
    /*if(skillAnimation[i,0]) {
        draw_sprite(spr_skill_usable,skillAnimation[i,1],skillX,skillY);
    }*/
}
for (var i = 0; i &lt; array_length_1d(hotbarSurface); i++) {
    if (skillAnimation[i,0]) {
        if (!surface_exists(hotbarSurface[i])) {
            hotbarSurface[i] = surface_create(64,64);
        }
        else {
            skillID = i+(20+(global.class*4));
            draw_surface(hotbarSurface[i],((wv/2)+(i*80))-152,hv-100);
            surface_set_target(hotbarSurface[i]);
            draw_sprite_ext(spr_skills,skillID,0,0,2,2,0,white,1);
            draw_sprite(spr_skill_usable,0,-25+skillAnimation[i,1],-25+skillAnimation[i,1]);
            surface_reset_target();
            
        }
    }
}
/******************* POTIONS ******************/
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_sprite(spr_potions,0,((wv/2)-80)-152,hv-100);
draw_text_colour(((wv/2)-80)-120,hv-36,global.HPPotion,white,white,white,white,1);
draw_set_alpha(0.9);
draw_rectangle_colour(((wv/2)-80)-88,hv-36-(max(0,global.HPPotionCooldown)/600)*64,((wv/2)-80)-152,hv-36,0,0,0,0,false);
draw_set_alpha(1);
if (global.HPPotionCooldown &gt; 0) {
    draw_set_valign(fa_center);
    draw_set_halign(fa_middle);
    draw_text_colour(((wv/2)-80)-120,hv-64,global.HPPotionCooldown div 60,white,white,white,white,1);
}
if(global.HPPotionCooldown &gt; -39 &amp;&amp; global.HPPotionCooldown &lt; 0) {
    draw_sprite(spr_skill_usable,-global.HPPotionCooldown,((wv/2)-80)-152,hv-100);
}

draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_sprite(spr_potions,1,((wv/2)+320)-152,hv-100);
draw_text_colour(((wv/2)+320)-150,hv-36,global.SPPotion,white,white,white,white,1);
draw_set_alpha(0.9);
draw_rectangle_colour(((wv/2)+320)-88,hv-36-(max(0,global.SPPotionCooldown)/600)*64,((wv/2)+320)-152,hv-36,0,0,0,0,false);
draw_set_alpha(1);
if (global.SPPotionCooldown &gt; 0) {
    draw_set_valign(fa_center);
    draw_set_halign(fa_middle);
    draw_text_colour(((wv/2)+320)-120,hv-64,global.SPPotionCooldown div 60,white,white,white,white,1);
}
if(global.SPPotionCooldown &gt; -39 &amp;&amp; global.SPPotionCooldown &lt; 0) {
    draw_sprite(spr_skill_usable,-global.SPPotionCooldown,((wv/2)+320)-152,hv-100);
}
/******************* BUFF ******************/
for (var i = 0; i &lt; buffListSize; i++) {
    var xx = 16+((i mod 10)*34);
    var yy = 16+((i div 10)*34);
    if (buffList[i,buffListData.sprite] != -1) {
        draw_sprite(spr_buffs,buffList[i,buffListData.sprite],xx,yy);
        draw_set_valign(fa_top);
        draw_set_halign(fa_right);
        draw_set_font(buffFont);
        var time = buffList[i,buffListData.time] div 60;
        var timeString = "";
        if (time &gt; 60) {
            timeString = string(time div 3600)+" m";
        }
        else {
            timeString = string(time)+" s";
        }
        draw_text_colour(xx+32,yy+32,timeString,white,white,white,white,1);
    }
}
/******************* SYSTEM MESSAGE ******************/
draw_set_font(skillFont);
draw_set_valign(fa_top);
draw_set_halign(fa_right);
/************** System Message ***************/
if(systemMessageSize() &gt; 0){
    /*if(systemStartFade){ //If trigger to start fade is true
        if(systemMoveUp == 0 &amp;&amp; global.systemMessage[0,1] &gt; 0){ //If the rest is moved up 
            global.systemMessage[0,1] -= 6; //Fade out. NOTE: THIS VALUE MUST BE LATER THAN FADE IN VALUE
            if(ds_queue_size(global.systemMessageQueue) &gt; 0){
                systemMoveUp -= 14;
            }
        }
        else{
            global.systemMessage[0,1] = 0; 
            if(systemMoveUp &lt; 100){
                systemMoveUp += 10; //Move the list up
            }
            else{
                systemMoveUp = 0;
                //Swaping value
                for(i = 0; i &lt; global.systemMessageLength-1; i++){
                    global.systemMessage[i,0] = global.systemMessage[i+1,0];
                    global.systemMessage[i,1] = global.systemMessage[i+1,1];
                }
                //Set last value to empty
                global.systemMessage[global.systemMessageLength-1,0] = "";
                global.systemMessage[global.systemMessageLength-1,1] = 0;
            }
        }
        if(ds_queue_size(global.systemMessageQueue) &gt; 0){ //Grab new message from internal queue
            if(global.systemMessage[global.systemMessageLength-1,0] == ""){
                global.systemMessage[global.systemMessageLength-1,0] = string(ds_queue_dequeue(global.systemMessageQueue));
            }
        }
    }
    for(i = 0; i &lt; global.systemMessageLength; i++){ //Fade in new messages
        if(global.systemMessage[i,0] != "" &amp;&amp; global.systemMessage[i,1] &lt; 120){ //Not blank and timer is not maxed
            global.systemMessage[i,1] += 2; //Fade in
        }
        else{
            if(i == 0 &amp;&amp; global.systemMessage[i,1] == 120){ //If message is the first 
                systemStartFade = true; //Start the fading process
            }
        }
    }*/
    if(systemStartFade){
        if(global.systemMessage[0,1] &gt; 0){
            global.systemMessage[0,1] -= 10;
        }
        else{
            if(ds_queue_size(global.systemMessageQueue) &gt; 0) {
                if(systemMoveUp &lt; 16) {
                    systemMoveUp += 2;
                }
            }
            if (systemMoveUp == 16 || ds_queue_size(global.systemMessageQueue) == 0) {
                for(var i = 0; i &lt; global.systemMessageLength-1; i++){
                    global.systemMessage[i,0] = global.systemMessage[i+1,0];
                    global.systemMessage[i,1] = global.systemMessage[i+1,1];
                }
                //Set last value to empty
                global.systemMessage[global.systemMessageLength-1,0] = "";
                global.systemMessage[global.systemMessageLength-1,1] = 0;
                systemMoveUp = 0;
                if (global.systemMessage[global.systemMessageLength-1,0] == "") {
                    systemStartFade = false;
                }
            }
        }
        if(ds_queue_size(global.systemMessageQueue) &gt; 0) { //Grab new message from internal queue
            if(global.systemMessage[global.systemMessageLength-1,0] == ""){
                global.systemMessage[global.systemMessageLength-1,0] = string(ds_queue_dequeue(global.systemMessageQueue));
            }
        }
    }
    for(var i = 0; i &lt; global.systemMessageLength; i++){ //Fade in new messages
        if(global.systemMessage[i,0] != "" &amp;&amp; global.systemMessage[i,1] &lt; 300){ //Not blank and timer is not maxed
            global.systemMessage[i,1] += 5; //Fade in
        }
        else{
            if(i == 0 &amp;&amp; global.systemMessage[i,1] == 300){ //If message is the first 
                systemStartFade = true; //Start the fading out process
            }
        }
    }
}
else{
    systemStartFade = false;
}
for(var j = 0; j &lt; systemMessageSize(); j++){
    //draw_text_colour(wv,(j-(systemMoveUp/100))*16,global.systemMessage[j,0],white,white,white,white,global.systemMessage[j,1]/60);
    draw_text_colour(wv,16*(systemMessageSize()-j)-16+systemMoveUp,global.systemMessage[j,0],white,white,white,white,global.systemMessage[j,1]/50);
}
/******************* WINDOWS ******************/
if(openSkillWindow){
    drawSkill();
}
if(openDetailStat){
    drawDetailStat();
}
/******************* FPS ******************/
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text_colour(0,0,string(fps)+"#"+string(fps_real),white,white,white,white,1);
/******************* COMBO ******************/
draw_set_font(comboFont);
draw_set_valign(fa_center);
draw_set_halign(fa_left);
if (damageSize &gt; 1) {
    damageSize *= 0.9;
}
if (totalHits &gt; 0) {
    for (var i = 0; i &lt; string_length(string(totalPlayerDamage)); i++) {
        draw_sprite_ext(spr_combo_font,(floor(totalPlayerDamage/power(10,i)) mod 10),(string_length(string(totalPlayerDamage))-i)*21,48,damageSize,damageSize,0,white,1);
    }
    for (var i = 0; i &lt; string_length(string(totalHits)); i++) {
        draw_sprite_ext(spr_combo_font,(floor(totalHits/power(10,i)) mod 10),(string_length(string(totalHits))-i)*21,80,damageSize,damageSize,0,white,1);
    }
    draw_sprite(spr_combo_back,0,23+string_length(string(totalPlayerDamage))*23,64);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (var i = view_xview[0] div global.gridSize; i &lt; view_wview[0] div global.gridSize; i++) {
    for (var j = view_yview[0] div global.gridSize; j &lt; view_hport[0] div global.gridSize; j++) {
        draw_set_alpha(0.3);
        if (mp_grid_get_cell(global.grid,i,j) == -1) {
            draw_set_colour(red);
        }
        else {
            draw_set_colour(green);
        }
        draw_rectangle(i*global.gridSize,j*global.gridSize,(i+1)*global.gridSize,(j+1)*global.gridSize,false);
        draw_set_colour(white);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

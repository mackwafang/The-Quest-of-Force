<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.class = 0;
global.str = 10;
global.stam = 10;
global.mana = 5;
global.luck = 10;
global.crit = 5;
global.critAtt = 22;

global.level = 1;
global.maxHP = 40;
global.maxSP = 30;
global.hpGen = 0;
global.spGen = 0;
global.sp = global.maxSP;
global.xp = calculateTotalXP(0);
global.maxXP = 10;
global.gold = 0;
global.dualWield = false;
global.damage_font = font_add_sprite(spr_damage_font,ord("0"),false,0);
global.game_font = font_add_sprite(spr_game_font,ord(" "),true,0);
global.skillNumberFont = font_add_sprite(spr_skill_level_required,ord("0"),false,0);
guiFont = font_add_sprite(spr_gui_font,ord("!"),true,0);
skillFont = font_add_sprite(spr_skill_font,ord(" "),true,2);
global.skillCooldown[0] = 0;
global.skillCooldown[1] = 0;
global.skillCooldown[2] = 0;
global.skillCooldown[3] = 0;
global.skillMaxCooldown[0] = 6*60;
global.skillMaxCooldown[1] = 10*60;
global.skillMaxCooldown[2] = 20*60;
global.skillMaxCooldown[3] = 40*60;
global.skillPoints = 1;
initStat();

global.systemMessageLength = 10
for(i = 0; i &lt; global.systemMessageLength; i++){
    global.systemMessage[i,0] = "";//String
    global.systemMessage[i,1] = 0; //Timer
}
systemMessageTimer = 0;
systemStartFade = false;
systemMoveUp = 0;
global.systemMessageQueue = ds_queue_create();

openSkillWindow = false;
openDetailStat = false;
skill_init();
skillCoordinate();
//setAllSkills(-1);
global.useLighting = false;
if(global.useLighting){
    lightmap_init(view_wview[0],view_hview[0]);
    lightmap_set_caster_parent_object(obj_wall);
    lightmap_set_light_parent_object(obj_player);
    lightmap_move_with_view(true);
    lightmap_set_ambient(0);
}
display_set_gui_size(view_wport,view_hport);
statFont = font_add_sprite(spr_stat_font,ord("0"),true,0);
healthMove = 0;
spMove = 0;
xpMove = 0;

test = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 60;
healthMove = var_wipe(healthMove,health,global.maxHP,0,0.5);
spMove = var_wipe(spMove,global.sp,global.maxSP,0,0.5);
xpMove = var_wipe(xpMove,global.xp,global.maxXP,0.2,0);
global.sp = clamp(global.sp,0,global.maxSP);
health = clamp(health,0,global.maxHP);
global.hpGen = min(100,global.stam div 5)+useSkill(39,1)+useSkill(40,1)+useSkill(47,1);
global.spGen = min(100,global.mana div 5)+useSkill(16,1)+useSkill(17,1)+useSkill(18,1);
/*if(keyboard_check_pressed(vk_left)){
    room = global.dungeonRooms[--global.currentRoomX,global.currentRoomY];
}
if(keyboard_check_pressed(vk_right)){
    room = global.dungeonRooms[++global.currentRoomX,global.currentRoomY];
}
if(keyboard_check_pressed(vk_up)){
    room = global.dungeonRooms[global.currentRoomX,--global.currentRoomY];
}
if(keyboard_check_pressed(vk_down)){
    room = global.dungeonRooms[global.currentRoomX,++global.currentRoomY];
}
/******************* Skill Cooldown ******************/
for(i = 0; i &lt; 4; i++){
    if(global.skillCooldown[i] &gt; 0){
        global.skillCooldown[i] --;
    }
}
/************** Skill window ***************/
if(keyboard_check_pressed(ord("K"))){
    if(openSkillWindow){
        openSkillWindow = false;
    }
    else{
        openSkillWindow = true;
        if(openDetailStat){
            openDetailStat = false;
        }
    }
}
if(keyboard_check_pressed(ord("T"))){
    if(openDetailStat){
        openDetailStat = false;
    }
    else{
        openDetailStat = true;
        if(openSkillWindow){
            openSkillWindow = false;
        }
    }
}
/************** Level Up ***************/
if(global.xp &gt;= global.maxXP){
    global.level++;
    global.xp -= global.maxXP;
    global.maxXP = ceil(global.level*20);
    sendSystemMessage("Level "+string(global.level)+" achieved!");
    for(i = 0; i &lt; array_height_2d(global.skill); i++){
        if(global.level == global.skill[i,2]){
            sendSystemMessage(getSkillName(i)+" can be learn");
            break;
        }
    }
    global.skillPoints ++;
    switch(global.class){
        case 0: global.str++;
                global.stam++;
                global.mana++;
                global.luck++;
                increaseHPSP(10,10);
                break;
        case 1: global.str += 2;
                global.stam++;
                global.luck++;
                increaseHPSP(20,0);
                break;
        case 2: global.stam++;
                global.mana += 2;
                global.luck++;
                increaseHPSP(5,15);
                break;
        case 3: global.str++;
                global.stam++;
                global.luck += 2;
                increaseHPSP(10,10);
                break;
        case 4: global.str++;
                global.stam++;
                global.mana++;
                global.luck++;
                increaseHPSP(15,5);
                break;
    }
    heal(global.maxHP,global.maxSP);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var wv, hv, xv, yv;
wv = view_wport[0];
hv = view_hport[0];
xv = view_xview[0];
yv = view_yview[0];
if(keyboard_check_pressed(vk_enter)) {game_restart();}
/*for(var i = 0; i &lt; global.dungeonW; i++){
    for(var j = 0; j &lt; global.dungeonH; j++){
        if(obj_player.x div 256 == j &amp;&amp; obj_player.y div 256 == i){
            draw_sprite_ext(spr_maze_sprite,global.dungeon[i,j],j*32,i*32,1,1,0,red,1);
        }
        else{
            draw_sprite(spr_maze_sprite,global.dungeon[i,j],j*32,i*32);
        }
    }
}
/******************* HEALTH ******************/
draw_rectangle_colour(0,hv-36,wv,hv,0,0,0,0,false);

draw_set_font(global.skillNumberFont);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_primitive_begin(pr_trianglefan);
draw_set_colour(red);
draw_vertex(0,hv-32);
draw_vertex((healthMove*5.12),hv-32);
draw_vertex((healthMove*5.12)-32,hv-12);
draw_vertex(0,hv-12);
draw_set_colour(white);
draw_primitive_end();
draw_text_transformed_colour(5,hv-22,string(round(health)),1.5,1.5,0,white,white,white,white,1);
/******************* SP ******************/
draw_set_valign(fa_middle);
draw_set_halign(fa_right);
draw_primitive_begin(pr_trianglefan);
draw_set_colour(aqua);
draw_vertex(wv,hv-32);
draw_vertex(wv-(spMove*5.12),hv-32);
draw_vertex(wv-(spMove*5.12)+32,hv-12);
draw_vertex(wv,hv-12);
draw_set_colour(white);
draw_primitive_end();
draw_text_transformed_colour(wv-5,hv-22,string(round(global.sp)),1.5,1.5,0,white,white,white,white,1);
/******************* XP ******************/
draw_set_font(global.game_font);
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
draw_text_colour(wv/2,hv-12,global.level,white,white,white,white,1);
draw_rectangle_colour(0,hv-2,xpMove*wv/100,hv-12,green,green,green,green,false);
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
draw_text_colour(0,hv+2,string(global.xp)+"/"+string(global.maxXP),$FFFFFF,$FFFFFF,$FFFFFF,$FFFFFF,1);
draw_set_halign(fa_right);
draw_text_colour(wv,hv+2,string((global.xp/global.maxXP)*100)+"%",$FFFFFF,$FFFFFF,$FFFFFF,$FFFFFF,1);
/******************* STAT ******************/
draw_sprite(spr_stat,0,16,hv-80);
draw_sprite(spr_stat,1,16,hv-48);
draw_sprite(spr_stat,2,wv-16,hv-80);
draw_sprite(spr_stat,3,wv-16,hv-48);
draw_set_font(statFont);
draw_set_valign(fa_center);
draw_set_halign(fa_left);
draw_text_colour(32,hv-80,global.str,white,white,white,white,1);
draw_text_colour(32,hv-48,global.stam,white,white,white,white,1);
draw_set_valign(fa_center);
draw_set_halign(fa_right);
draw_text_colour(wv-32,hv-80,global.mana,white,white,white,white,1);
draw_text_colour(wv-32,hv-48,global.luck,white,white,white,white,1);
/******************* ATTACK SKILL******************/
for(i = 0; i &lt; 4; i++){
    var skillX, skillY,skillID;
    skillID = i+(20+(global.class*4));
    skillX = ((wv/2)+(i*80))-152;
    skillY = hv-100;
    draw_sprite_ext(spr_skills,skillID,skillX,skillY,2,2,0,white,1);
    if(global.skillCooldown[i] &gt; 0){
        draw_set_alpha(0.8);
        draw_set_colour(0);
        draw_rectangle(skillX,skillY+64,skillX+64,skillY+64-(global.skillCooldown[i]/global.skillMaxCooldown[i])*64,false);
        draw_set_colour(1);
        draw_set_alpha(1);
        draw_set_valign(fa_center);
        draw_set_halign(fa_middle);
        draw_text_colour(skillX+32,skillY+32,global.skillCooldown[i] div 60,white,white,white,white,1);
    }
    if(global.level &lt; global.skill[i+(20+(global.class*4)),2] || global.skill[i+(20+(global.class*4)),0] == 0 || global.sp &lt; useSkill(skillID,2)+(global.skill[skillID,0]*10)){
        draw_set_alpha(0.8);
        draw_set_colour(0);
        draw_rectangle(skillX,skillY+64,skillX+64,skillY,false);
        draw_set_colour(1);
        draw_set_alpha(1);
    }
}
/******************* SYSTEM MESSAGE ******************/
draw_set_font(skillFont);
draw_set_valign(fa_top);
draw_set_halign(fa_right);
/************** System Message ***************/
if(systemMessageSize() &gt; 0){
    /*if(systemStartFade){ //If trigger to start fade is true
        if(systemMoveUp == 0 &amp;&amp; global.systemMessage[0,1] &gt; 0){ //If the rest is moved up 
            global.systemMessage[0,1] -= 6; //Fade out. NOTE: THIS VALUE MUST BE LATER THAN FADE IN VALUE
            if(ds_queue_size(global.systemMessageQueue) &gt; 0){
                systemMoveUp -= 14;
            }
        }
        else{
            global.systemMessage[0,1] = 0; 
            if(systemMoveUp &lt; 100){
                systemMoveUp += 10; //Move the list up
            }
            else{
                systemMoveUp = 0;
                //Swaping value
                for(i = 0; i &lt; global.systemMessageLength-1; i++){
                    global.systemMessage[i,0] = global.systemMessage[i+1,0];
                    global.systemMessage[i,1] = global.systemMessage[i+1,1];
                }
                //Set last value to empty
                global.systemMessage[global.systemMessageLength-1,0] = "";
                global.systemMessage[global.systemMessageLength-1,1] = 0;
            }
        }
        if(ds_queue_size(global.systemMessageQueue) &gt; 0){ //Grab new message from internal queue
            if(global.systemMessage[global.systemMessageLength-1,0] == ""){
                global.systemMessage[global.systemMessageLength-1,0] = string(ds_queue_dequeue(global.systemMessageQueue));
            }
        }
    }
    for(i = 0; i &lt; global.systemMessageLength; i++){ //Fade in new messages
        if(global.systemMessage[i,0] != "" &amp;&amp; global.systemMessage[i,1] &lt; 120){ //Not blank and timer is not maxed
            global.systemMessage[i,1] += 2; //Fade in
        }
        else{
            if(i == 0 &amp;&amp; global.systemMessage[i,1] == 120){ //If message is the first 
                systemStartFade = true; //Start the fading process
            }
        }
    }*/
    if(systemStartFade){
        if(global.systemMessage[0,1] &gt; 0){
            global.systemMessage[0,1] -= 10;
            if(ds_queue_size(global.systemMessageQueue) &gt; 0){
                if(systemMoveUp &lt; 100) {systemMoveUp += 20;}
            }
        }
        else{
            for(i = 0; i &lt; global.systemMessageLength-1; i++){
                global.systemMessage[i,0] = global.systemMessage[i+1,0];
                global.systemMessage[i,1] = global.systemMessage[i+1,1];
            }
            //Set last value to empty
            global.systemMessage[global.systemMessageLength-1,0] = "";
            global.systemMessage[global.systemMessageLength-1,1] = 0;
            systemMoveUp = 0;
        }
        if(ds_queue_size(global.systemMessageQueue) &gt; 0){ //Grab new message from internal queue
            if(global.systemMessage[global.systemMessageLength-1,0] == ""){
                global.systemMessage[global.systemMessageLength-1,0] = string(ds_queue_dequeue(global.systemMessageQueue));
            }
        }
    }
    for(i = 0; i &lt; global.systemMessageLength; i++){ //Fade in new messages
        if(global.systemMessage[i,0] != "" &amp;&amp; global.systemMessage[i,1] &lt; 120){ //Not blank and timer is not maxed
            global.systemMessage[i,1] += 5; //Fade in
        }
        else{
            if(i == 0 &amp;&amp; global.systemMessage[i,1] == 120){ //If message is the first 
                systemStartFade = true; //Start the fading process
            }
        }
    }
}
else{
    systemStartFade = false;
}
for(j = 0; j &lt; systemMessageSize(); j++){
    //draw_text_colour(wv,(j-(systemMoveUp/100))*16,global.systemMessage[j,0],white,white,white,white,global.systemMessage[j,1]/60);
    draw_text_colour(wv,16*(systemMessageSize()-j+(systemMoveUp/100))-32,global.systemMessage[j,0],white,white,white,white,global.systemMessage[j,1]/60);
}
/******************* WINDOWS ******************/
if(openSkillWindow){
    drawSkill();
}
if(openDetailStat){
    drawDetailStat();
}
/******************* FPS ******************/
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text_colour(0,0,string(fps)+"#"+string(fps_real),white,white,white,white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.useLighting){
    lightmap_update();
    lightmap_draw();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_kinetic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
moveSpeed = 0;
fire = 0;
friction = 0.1;
weaponSide = 1;
healthGen = 0;
manaGen = 0;
dmg_mod = 1;

damage = 0;
totalDamage = 0;
totalFade = 0;
totalCrit = 1;
weaponAngle = 0;
weaponImage = spr_sword;
hitInt = 0;
skillActiveTime = 0;
skillAmmo = 0;

holder = 0; //Holder variable for any use
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(totalFade &gt; 0) {totalFade -= 0.05;} else {totalDamage = 0;}
if(totalCrit &gt; 1) {totalCrit *= 0.9;} else {totalCrit = 1;}
switch(global.class) {
    case 0: case 1:
        weaponImage = spr_sword;
        break;
    case 2: 
        weaponImage = spr_staff;
        break;
    case 3:
        weaponImage = spr_bow;
        break;
}
/******************** Moving between rooms ********************
if(x &lt; 0){
    room = global.dungeonRooms[--global.currentRoomX,global.currentRoomY];
    x = room_width-16;
}
if(x &gt; room_width){
    room = global.dungeonRooms[++global.currentRoomX,global.currentRoomY];
    x = 16;
}
if(y &lt; 0){
    room = global.dungeonRooms[global.currentRoomX,--global.currentRoomY];
    y = room_height-16;
}
if(y &gt; room_height){
    room = global.dungeonRooms[global.currentRoomX,++global.currentRoomY];
    y = 16;
}
/******************** MOVEMENT ********************/
if(canMove){
    if(keyboard_check(ord("W"))) {
        if(place_free(x,y-11)){
            vspeed -= moveSpeed/2;
        }
    }
    if(keyboard_check(ord("S"))) {
        if(place_free(x,y+11)){
            vspeed += moveSpeed/2;
        }
    }
    if(keyboard_check(ord("A"))) {
        if(place_free(x-11,y)){
            hspeed -= moveSpeed/2;
        }
    }
    if(keyboard_check(ord("D"))) {
        if(place_free(x+11,y)){
            hspeed += moveSpeed/2;
        }
    }
    //mp_grid_add_cell(global.grid,x div global.gridSize, y div global.gridSize);
    /******************** Melee ********************/
    if(fire &lt; 1){
        fire++;
    }
    if(mouse_check_button(mb_left)){
        if(fire &gt; 0){
            if (global.class != 3) {weaponSide *= -1;}
            manaGen = -60;
            fire -= 15-useSkill(42,1);
            if(global.class == 1){
                if(global.skillCooldown[1] &gt; 300){
                    fire += useSkill(25,1);
                }
            }
            if(global.class == 1 &amp;&amp; global.skillCooldown[1] &gt; 300){
                dmg_mod = 1-((global.skill[25,0]*5)/100);
            }
            else{
                dmg_mod = 1;
            }
            meleeAttack(false);
        }
    }
    /******************** Projectile ********************/
    var mpReq = max(1,round(global.level/10));
    if(mouse_check_button(mb_right)){
        if(fire &gt; 0){
            if(global.sp &gt;= mpReq){
                manaGen = -60;
                if(global.class != 2) {
                    fire -= 10-useSkill(42,1);
                    switch(global.class) {
                        case 1: 
                            if(global.skillCooldown[1] &gt; 300) {
                                fire -= (1-useSkill(25,1));
                            }
                            break;
                        case 3:
                            if (global.skillCooldown[0] &gt; 60) {
                                fire -= 10-useSkill(42,1);
                            }
                            break;
                    }
                }
                else {
                    fire -= 15-useSkill(42,1);
                }
                global.sp -= mpReq;
                if(global.class != 1){
                    with(instance_create(x,y,obj_force)){
                        speed = 5;
                        direction = other.image_angle;
                        specialAttack = true;
                        if(global.class == 0){
                            if(global.skillCooldown[0] &gt; 60){
                                dmg_mod = useSkill(20,1);
                                if(global.skill[20,0] == global.skill[20,1]){
                                    with(instance_create(x,y,obj_force)){
                                        speed = 7;
                                        direction = other.direction+10;
                                        dmg_mod /= other.dmg_mod;
                                    }
                                    with(instance_create(x,y,obj_force)){
                                        speed = 7;
                                        direction = other.direction-10;
                                        dmg_mod /= other.dmg_mod;
                                    }
                                }
                            }
                            else{
                                dmg_mod = 1;
                            }
                            if(global.skillCooldown[1] &gt; 300){
                                allowPierce = true;
                                maxPierce = useSkill(21,1);
                            }
                        }
                        else if (global.class == 3) {
                            dmg_type = 0;
                            if (global.skillCooldown[0] &gt; 60) {
                                dmg_mod += 2;
                                speed *= 3;
                            }
                            if (global.skillCooldown[1] &gt; 300) {
                                onFire = true;
                                dmg_mod += 0.5;
                            }
                        }
                        if(global.class == 2) {visible = false;}
                    }
                }
                else{
                    if(global.skillCooldown[0] &gt; 60){
                        dmg_mod += useSkill(24,1);
                        if(global.skillCooldown[1] &gt; 300){
                            dmg_mod -= ((global.skill[25,0]*5)/100);
                        }
                    }
                    else{
                        dmg_mod = 2;
                        if(global.skillCooldown[1] &gt; 300){
                            dmg_mod -= ((global.skill[25,0]*5)/100);
                        }
                    }
                    meleeAttack(true);
                }
            }
        }
    }
    if(global.class == 2){
        if(skillAmmo &gt; 0){
            skillActiveTime++;
            if(skillActiveTime mod 5 == 0){
                skillAmmo--;
                with(instance_create(x+lengthdir_x(power(-1,skillAmmo)*32,skillAmmo*6),y+lengthdir_y(power(-1,skillAmmo)*32,skillAmmo*6),obj_force)){
                    dmg_mod = useSkill(30,1);
                    speed = 0.5;
                    useIce = true;
                    direction = other.image_angle+90*(power(-1,other.skillAmmo))+irandom_range(-30,30);
                    speedUp = true;
                    maxSpeed = 5;
                    visible = false;
                    bounce = true;
                    speedingRate = 1.05;
                    homing = true;
                    target = instance_nearest(mouse_x,mouse_y,obj_enemy_parent);
                    alarm[0] = 20;
                    alarm[1] = 600;
                }
            }
        }
        else{
            skillActiveTime = 0;
        }
        if(global.skillCooldown[3] &gt; 600){
            if(global.skillCooldown[3] mod 30 == 0) {
                var enemy = instance_find(obj_enemy_parent,i);
                var magicCircle = instance_create(x+(128*cos(random(2*pi))),y+(128*sin(random(2*pi))),obj_force);
                magicCircle.visible = true;
                magicCircle.sprite_index = spr_magic_circle;
                magicCircle.image_xscale = 0;
                magicCircle.image_yscale = 0;
                magicCircle.maxSize = 2;
                magicCircle.isHeal = true;
                magicCircle.multiHit = true;
                magicCircle.maxHitInt = 10;
                magicCircle.dmgMod = 0.2;
                magicCircle.hitInt = 0;
                magicCircle.destroyOnWall = false;
                magicCircle.maxHit = 9999;
                magicCircle.alarm[1] = 300;
            }
                    /*with(nearest){
                        damage = global.mana*useSkill(31,1);
                        totalDamage += damage;
                        addStatus(0,global.mana,5);
                        enemy_health -= damage;
                        bounce = true;
                        knockback(self,other,10,20);
                        with(instance_create(x,y-32,obj_dmg_inc)){
                            damage = string(other.damage);
                            color = white;
                            font = global.damage_font;
                            size = 2;
                        }
                    }*/
        }
    }
    for(i = 1; i &lt;= 4; i++){
        if(keyboard_check_pressed(ord(string(i)))){
            switch(global.class){
                case 0: useForceMasterSkill(i); break;
                case 1: useSwordmanSkill(i); break;
                case 2: useWazardSkill(i); break;
                case 3: useMarksmanSkill(i); break;
            }
        }
    }
    /****************** POTIONS *******************/
    if(keyboard_check_pressed(ord("X"))) {
        if(global.HPPotionCooldown &lt;= 0 &amp;&amp; global.HPPotion &gt; 0) {
            global.HPPotion--;
            heal(round(global.maxHP)*0.25,0);
            global.HPPotionCooldown = 600;
            addBuffList("HP Potion",10,"HP continuously recovers",300);
        }
    }
    if(keyboard_check_pressed(ord("C"))) {
        if(global.SPPotionCooldown &lt;= 0 &amp;&amp; global.SPPotion &gt; 0) {
            global.SPPotion--;
            heal(0,round(global.maxSP)*0.25);
            global.SPPotionCooldown = 600;
            addBuffList("SP Potion",11,"SP continuously recovers",300);
        }
    }
}
moveSpeed = 2+useSkill(41,1);
speed = clamp(speed,-moveSpeed,moveSpeed);
image_angle = point_direction(x,y,mouse_x,mouse_y);
var healHPTime = 60;
var healSPTime = max(1,60-((useSkill(16,2)+useSkill(17,2)+useSkill(18,2))*global.skill[18,0]));
if (global.HPPotionCooldown &gt; 300) {
    healHPTime *= 0.25;
}
if (global.SPPotionCooldown &gt; 300) {
    healSPTime *= 0.25;
}

if (healthGen &lt; healHPTime){
    healthGen++;
}
else{
    if(health &lt; global.maxHP){
        health += round(global.hpGen);
    }
    healthGen = 0;
}
if(manaGen &lt; healSPTime){
    manaGen++;
}
else{
    if(global.sp &lt; global.maxSP){
        global.sp += global.spGen;
    }
    manaGen = 0;
}
if(global.class == 2 &amp;&amp; global.skillCooldown[1] &gt; 300){
    global.sp += useSkill(29,1);
}
knockbackPerform();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction,speed);
speed = 0;
/*var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while(place_meeting(x,y,other)){
    x-=xoff;
    y-=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_force">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.canDamage){
    knockback(self,other,0,1);
    if(other.allowPierce){ //peircing
        if(!inArray(other.pierce,id)){
            enemyDealDamage(other.dmg_type);
            other.pierce[other.aIndex] = id;
            ++other.aIndex;
        }
    }
    else if(other.multiHit){ //multiple hit
        if(hitInt &lt; other.maxHitInt){ //Check interval
            hitInt++; // increment
        }
        else{
            hitInt = 0; //reset counter
            if(other.hit &lt; other.maxHit){//increment total allowed hit
                other.hit++;
            }
            else{
                with(other) {instance_destroy();}
            }
            enemyDealDamage(other.dmg_type);
            // deal damage
        }
    }
    else{ //normal hit
        enemyDealDamage(1);
        with(other){
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_force">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.isHeal) {
    if (other.hitInt == other.maxHitInt) {
        damage = round((useSkill(28,1)/100)*global.maxHP);
        health += damage;
        var ind = instance_create(x+irandom(sprite_width)*choose(-1,1),y+irandom(sprite_height)*choose(-1,1),obj_dmg_inc);
        ind.damage = damage;
        ind.size = 2;
        ind.color = green;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.damage_font);
draw_set_valign(fa_bottom);
draw_set_halign(fa_center);
var xx, yy, xv, yv;
xv = view_xview[0];
yv = view_yview[0];
xx = (x-xv)*windowXRatio;
yy = (y-yv)*windowYRatio;
draw_text_transformed_colour(xx,yy-24,totalDamage,min(2,totalCrit),min(2,totalCrit),0,red,red,red,red,totalFade);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var weapon_x, weapon_y;
weaponAngle = direction_wipe(weaponAngle,image_angle-(fire*weaponSide*20)-20,50);
weapon_x = lengthdir_x(8,image_angle);
weapon_y = lengthdir_y(8,image_angle);
draw_sprite_ext(weaponImage,0,x+weapon_x,y+weapon_y,weaponSide,1,weaponAngle,white,1);
if(global.dualWield) {draw_sprite_ext(weaponImage,0,x+weapon_x,y+weapon_y,-weaponSide,-1,image_angle-(-fire*weaponSide*20)-20,white,1);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
